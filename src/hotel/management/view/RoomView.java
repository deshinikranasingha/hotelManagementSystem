/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package hotel.management.view;

import hotel.management.controller.RoomCatogoryController;
import hotel.management.controller.RoomController;
import hotel.management.dto.RoomCatogoryDto;
import hotel.management.dto.RoomDto;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Deshini
 */
public class RoomView extends javax.swing.JFrame {
    
    private final RoomController roomController;

    private final RoomCatogoryController roomCatogoryController;

    /**
     * Creates new form RoomView
     */
    public RoomView() {
        roomController = new RoomController();
        roomCatogoryController =new RoomCatogoryController();
        initComponents();
        loadRoomCatogoryNames();
        loadRooms();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        headerLable = new javax.swing.JLabel();
        roomNo = new javax.swing.JLabel();
        floor = new javax.swing.JLabel();
        floorArea = new javax.swing.JLabel();
        facilities = new javax.swing.JLabel();
        bed = new javax.swing.JRadioButton();
        table = new javax.swing.JRadioButton();
        coffeeKit = new javax.swing.JRadioButton();
        roomNumberText = new javax.swing.JTextField();
        floorCombBox = new javax.swing.JComboBox<>();
        floorAreaText = new javax.swing.JTextField();
        bedType = new javax.swing.JLabel();
        bedTypeCombBox = new javax.swing.JComboBox<>();
        ac = new javax.swing.JCheckBox();
        nonAc = new javax.swing.JCheckBox();
        roomCatogory = new javax.swing.JLabel();
        roomCatogoryCombBox = new javax.swing.JComboBox<>();
        add = new javax.swing.JButton();
        update = new javax.swing.JButton();
        delete = new javax.swing.JButton();
        back = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        roomManagementTable = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);

        headerLable.setFont(new java.awt.Font("Segoe UI", 0, 36)); // NOI18N
        headerLable.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        headerLable.setText("Room Management System");

        roomNo.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        roomNo.setText("Room No");

        floor.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        floor.setText("Floor");

        floorArea.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        floorArea.setText("Floor Area");

        facilities.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        facilities.setText("Facilities");

        bed.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        bed.setText("Bed");
        bed.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bedActionPerformed(evt);
            }
        });

        table.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        table.setText("Table");
        table.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tableActionPerformed(evt);
            }
        });

        coffeeKit.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        coffeeKit.setText("Coffee Kit");
        coffeeKit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                coffeeKitActionPerformed(evt);
            }
        });

        roomNumberText.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N

        floorCombBox.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        floorCombBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "1", "2", "3", "4", "5", "6" }));
        floorCombBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                floorCombBoxActionPerformed(evt);
            }
        });

        floorAreaText.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N

        bedType.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        bedType.setText("Bed Type");

        bedTypeCombBox.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        bedTypeCombBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Single  Bed", "Double Bed", "Triple Bed" }));
        bedTypeCombBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bedTypeCombBoxActionPerformed(evt);
            }
        });

        ac.setText("AC");
        ac.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                acActionPerformed(evt);
            }
        });

        nonAc.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        nonAc.setText("Non AC");
        nonAc.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nonAcActionPerformed(evt);
            }
        });

        roomCatogory.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        roomCatogory.setText("Room Catogory");

        roomCatogoryCombBox.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        roomCatogoryCombBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        roomCatogoryCombBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                roomCatogoryCombBoxActionPerformed(evt);
            }
        });

        add.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        add.setText("Add");
        add.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addActionPerformed(evt);
            }
        });

        update.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        update.setText("Update");
        update.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateActionPerformed(evt);
            }
        });

        delete.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        delete.setText("Delete");
        delete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteActionPerformed(evt);
            }
        });

        back.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        back.setText("Back");
        back.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backActionPerformed(evt);
            }
        });

        roomManagementTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        roomManagementTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                roomManagementTableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(roomManagementTable);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(headerLable, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(roomNo)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(roomNumberText, javax.swing.GroupLayout.PREFERRED_SIZE, 163, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(37, 37, 37)
                                .addComponent(floor)
                                .addGap(18, 18, 18)
                                .addComponent(floorCombBox, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(facilities)
                                    .addComponent(bedType))
                                .addGap(52, 52, 52)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(bed)
                                        .addGap(64, 64, 64)
                                        .addComponent(table)
                                        .addGap(63, 63, 63)
                                        .addComponent(coffeeKit))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(bedTypeCombBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(61, 61, 61)
                                        .addComponent(ac)
                                        .addGap(31, 31, 31)
                                        .addComponent(nonAc))))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(add)
                                        .addGap(52, 52, 52)
                                        .addComponent(update))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(roomCatogory)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(roomCatogoryCombBox, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGap(55, 55, 55)
                                .addComponent(delete)))
                        .addGap(14, 14, 14)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(back)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(floorArea)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(floorAreaText)))))
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(36, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 546, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(41, 41, 41))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(headerLable, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(roomNo)
                    .addComponent(floor)
                    .addComponent(floorArea)
                    .addComponent(roomNumberText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(floorCombBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(floorAreaText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(facilities)
                        .addComponent(bed))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(table)
                        .addComponent(coffeeKit)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(bedType)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(bedTypeCombBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(ac))
                    .addComponent(nonAc))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(roomCatogory)
                    .addComponent(roomCatogoryCombBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(add)
                    .addComponent(update)
                    .addComponent(delete)
                    .addComponent(back))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 18, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void bedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bedActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_bedActionPerformed

    private void tableActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tableActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_tableActionPerformed

    private void floorCombBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_floorCombBoxActionPerformed
        floor();// TODO add your handling code here:
    }//GEN-LAST:event_floorCombBoxActionPerformed

    private void acActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_acActionPerformed
        acActionPerformed();// TODO add your handling code here:
    }//GEN-LAST:event_acActionPerformed

    private void bedTypeCombBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bedTypeCombBoxActionPerformed
        bedType();// TODO add your handling code here:
    }//GEN-LAST:event_bedTypeCombBoxActionPerformed

    private void nonAcActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nonAcActionPerformed
        nonAcActionPerformed();// TODO add your handling code here:
    }//GEN-LAST:event_nonAcActionPerformed

    private void addActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addActionPerformed
        addRoom();// TODO add your handling code here:
    }//GEN-LAST:event_addActionPerformed

    private void updateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateActionPerformed
        updateRoom();// TODO add your handling code here:
    }//GEN-LAST:event_updateActionPerformed

    private void deleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteActionPerformed
        deleteRoom();// TODO add your handling code here:
    }//GEN-LAST:event_deleteActionPerformed

    private void backActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backActionPerformed
        back();// TODO add your handling code here:
    }//GEN-LAST:event_backActionPerformed

    private void roomCatogoryCombBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_roomCatogoryCombBoxActionPerformed
        roomCatogoryNames();// TODO add your handling code here:
    }//GEN-LAST:event_roomCatogoryCombBoxActionPerformed

    private void roomManagementTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_roomManagementTableMouseClicked
        serachRoom();// TODO add your handling code here:
    }//GEN-LAST:event_roomManagementTableMouseClicked

    private void coffeeKitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_coffeeKitActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_coffeeKitActionPerformed

    /**
     * @param args the command line arguments
     */

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox ac;
    private javax.swing.JButton add;
    private javax.swing.JButton back;
    private javax.swing.JRadioButton bed;
    private javax.swing.JLabel bedType;
    private javax.swing.JComboBox<String> bedTypeCombBox;
    private javax.swing.JRadioButton coffeeKit;
    private javax.swing.JButton delete;
    private javax.swing.JLabel facilities;
    private javax.swing.JLabel floor;
    private javax.swing.JLabel floorArea;
    private javax.swing.JTextField floorAreaText;
    private javax.swing.JComboBox<String> floorCombBox;
    private javax.swing.JLabel headerLable;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JCheckBox nonAc;
    private javax.swing.JLabel roomCatogory;
    private javax.swing.JComboBox<String> roomCatogoryCombBox;
    private javax.swing.JTable roomManagementTable;
    private javax.swing.JLabel roomNo;
    private javax.swing.JTextField roomNumberText;
    private javax.swing.JRadioButton table;
    private javax.swing.JButton update;
    // End of variables declaration//GEN-END:variables

    
    private void loadRoomCatogoryNames() {
        try {
            List<RoomCatogoryDto> roomCatogoryDtos = roomCatogoryController.getAllRoomCatogory();
            DefaultComboBoxModel<String> comboBoxModel = new DefaultComboBoxModel<>();
            
            roomCatogoryCombBox.setModel(comboBoxModel);

            for (RoomCatogoryDto roomCatogoryDto : roomCatogoryDtos) {
                comboBoxModel.addElement(roomCatogoryDto.getRoomCatogoryName());
            }

        } catch (Exception ex) {
            Logger.getLogger(RoomCatogoryView.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(this, ex.getMessage());
        }
    }

    private void loadRooms() {
        try {
            String columns[] = {"Room Number", "Floor", "Floor Area", "Bed", "Table","Coffee Kit", "AC","Non AC", "Room Catogory"};
            DefaultTableModel defaultTableModel = new DefaultTableModel(columns, 0) {
                @Override
                public boolean isCellEditable(int row, int column) {
                    return false;
                }

            };

            roomManagementTable.setModel(defaultTableModel);

            List<RoomDto> roomDtos = roomController.getAllRooms();

            for (RoomDto roomDto : roomDtos) {
                Object[] rowData = {
                    roomDto.getRoomId(),
                    roomDto.getFloor(),
                    roomDto.getFloorArea(),
                    roomDto.isBed(),
                    roomDto.isTable(),
                    roomDto.isCoffeeKit(),
                    roomDto.isAc(),
                    roomDto.isNonAc(),
                    roomDto.getRoomCatogory()
                };
                defaultTableModel.addRow(rowData);
            }

        } catch (Exception ex) {
            Logger.getLogger(RoomView.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(this, ex.getMessage());
        }
    }

    private void addRoom() {
        RoomDto roomDto = new RoomDto();

        roomDto.setRoomId(roomNumberText.getText());
        roomDto.setFloor((String) floorCombBox.getSelectedItem());
        roomDto.setFloorArea(Double.parseDouble(floorAreaText.getText()));

        if (bed.isSelected()) {
            roomDto.setBed(true);
        }
        if (table.isSelected()) {
            roomDto.setTable(true);
        }
        if (coffeeKit.isSelected()) {
            roomDto.setCoffeeKit(true);
        }

        if (ac.isSelected()) {
            roomDto.setAc(true);
        } else if (nonAc.isSelected()) {
            roomDto.setAc(false);
        }

        roomDto.setBedType((String) bedTypeCombBox.getSelectedItem());
        
        roomDto.setRoomCatogory((String) roomCatogoryCombBox.getSelectedItem());

        try {
            String result = roomController.addRoom(roomDto);
            JOptionPane.showMessageDialog(this, result);
            clear();
            loadRoomCatogoryNames();
            loadRooms();
        } catch (Exception ex) {
            Logger.getLogger(RoomView.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(this, ex.getMessage());
        }
    }

    private void updateRoom() {
        try {
            RoomDto roomDto = new RoomDto();

            roomDto.setRoomId(roomNumberText.getText());
            roomDto.setFloor((String) floorCombBox.getSelectedItem());
            roomDto.setFloorArea(Double.parseDouble(floorAreaText.getText()));

            if (bed.isSelected()) {
                roomDto.setBed(true);
            }
            if (table.isSelected()) {
                roomDto.setTable(true);
            }
            if (coffeeKit.isSelected()) {
                roomDto.setCoffeeKit(true);
            }

            if (ac.isSelected()) {
                roomDto.setAc(true);
            } else if (nonAc.isSelected()) {
                roomDto.setNonAc(true);
            }

            roomDto.setBedType((String) bedTypeCombBox.getSelectedItem());

            roomDto.setRoomCatogory((String) roomCatogoryCombBox.getSelectedItem());

            String result = roomController.updateRoom(roomDto);
            JOptionPane.showMessageDialog(this, result);
            loadRoomCatogoryNames();
            loadRooms();
            clear();
        } catch (Exception ex) {
            Logger.getLogger(RoomView.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(this, ex.getMessage());
        }

    }

    private void deleteRoom() {
        try {
            String roomId = roomNumberText.getText();
            String resp = roomController.deleteRoom(roomId);
            JOptionPane.showMessageDialog(this, resp);
            loadRooms();
            clear();
        } catch (Exception ex) {
            Logger.getLogger(RoomView.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(this, ex.getMessage());
        }
    }

    private void back() {
        dispose();
        new MainPageView().setVisible(true);
    }

    private void acActionPerformed() {
        if (ac.isSelected()) {
            nonAc.setSelected(false);
        }
    }

    private void nonAcActionPerformed() {
        if (nonAc.isSelected()) {
            ac.setSelected(false);
        }
    }

    private void bedType() {
        String selectedBedType = bedTypeCombBox.getSelectedItem().toString();
    }

    private void floor() {
        int selectedFloor = Integer.parseInt(floorCombBox.getSelectedItem().toString());
    }

    private void roomCatogoryNames() {
        String selectedRoomCatogoryType = roomCatogoryCombBox.getSelectedItem().toString();
    }

    private void serachRoom() {
        String roomId = roomManagementTable.getValueAt(roomManagementTable.getSelectedRow(), 0).toString();
        try {
            RoomDto roomDto = roomController.getRoom(roomId);

            if (roomId != null) {
                roomNumberText.setText(roomDto.getRoomId());
                floorCombBox.setSelectedItem(roomDto.getFloor());
                floorAreaText.setText(Double.toString(roomDto.getFloorArea()));
                bed.setSelected(roomDto.isBed());
                table.setSelected(roomDto.isTable());
                coffeeKit.setSelected(roomDto.isCoffeeKit());
                ac.setSelected(roomDto.isAc());
                nonAc.setSelected(!roomDto.isAc());
                bedTypeCombBox.setSelectedItem(roomDto.getBedType());
                roomCatogoryCombBox.setSelectedItem(roomDto.getRoomCatogory());
            } else {
                JOptionPane.showMessageDialog(this, "Room Not Found");
            }
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage());
        }
    }

    private void clear() {
        roomNumberText.setText("");
        floorCombBox.setSelectedIndex(0);
        floorAreaText.setText("");
        bed.setSelected(false);
        table.setSelected(false);
        coffeeKit.setSelected(false);
        ac.setSelected(false);
        nonAc.setSelected(false);
        bedTypeCombBox.setSelectedIndex(0);
        roomCatogoryCombBox.setSelectedIndex(0);
    }
}
