/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package hotel.management.view;

import hotel.management.controller.CustomerController;
import hotel.management.controller.ReservationController;
import hotel.management.controller.RoomCatogoryController;
import hotel.management.controller.RoomController;
import hotel.management.dto.CustomerDto;

import hotel.management.dto.ReservationDto;
import hotel.management.dto.RoomCatogoryDto;
import hotel.management.dto.RoomDto;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;


/**
 *
 * @author Deshini
 */
public class ReservationView extends javax.swing.JFrame {
    
    private CustomerController customerController;
    private RoomController roomController;
    private RoomCatogoryController roomCatogoryController;
    private ReservationController reservationController;


    /**
     * Creates new form ReservationView
     */
    public ReservationView() {
        customerController = new CustomerController();
        roomController = new RoomController();
        roomCatogoryController = new RoomCatogoryController();
        reservationController = new ReservationController();
        
        initComponents();
        loadRooms();
        loadRoomCatogory();
        loadTable();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        customerId = new javax.swing.JLabel();
        customerIdText = new javax.swing.JTextField();
        searchCustomer = new javax.swing.JButton();
        roomDetailsText = new javax.swing.JLabel();
        reservationDate = new javax.swing.JLabel();
        roomCatogory = new javax.swing.JLabel();
        selectFloorCombBox = new javax.swing.JComboBox<>();
        roomNumber = new javax.swing.JLabel();
        roomNumberBox = new javax.swing.JComboBox<>();
        customerDetailsLable = new javax.swing.JLabel();
        arrivalDate = new javax.swing.JLabel();
        departureDate = new javax.swing.JLabel();
        fullBoardCheckBox = new javax.swing.JCheckBox();
        halfBoardCheckBox = new javax.swing.JCheckBox();
        bnbCheckBox = new javax.swing.JCheckBox();
        confirm = new javax.swing.JButton();
        update = new javax.swing.JButton();
        cancle = new javax.swing.JButton();
        back = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        reservationDetailsTable = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        reservationDateChooser = new com.toedter.calendar.JDateChooser();
        arrivalDateChooser = new com.toedter.calendar.JDateChooser();
        departureDateChooser = new com.toedter.calendar.JDateChooser();
        reservationId = new javax.swing.JLabel();
        reservationIdText = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);

        customerId.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        customerId.setText("Customer ID");

        searchCustomer.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        searchCustomer.setText("Search");
        searchCustomer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchCustomerActionPerformed(evt);
            }
        });

        roomDetailsText.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N

        reservationDate.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        reservationDate.setText("Reservation Date");

        roomCatogory.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        roomCatogory.setText("Room Catogory");

        selectFloorCombBox.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        selectFloorCombBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        selectFloorCombBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectFloorCombBoxActionPerformed(evt);
            }
        });

        roomNumber.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        roomNumber.setText("Room Number");

        roomNumberBox.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        roomNumberBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        roomNumberBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                roomNumberBoxActionPerformed(evt);
            }
        });

        customerDetailsLable.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N

        arrivalDate.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        arrivalDate.setText("Arriavle Date");

        departureDate.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        departureDate.setText("Departure Date");

        fullBoardCheckBox.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        fullBoardCheckBox.setText("Full Board");
        fullBoardCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fullBoardCheckBoxActionPerformed(evt);
            }
        });

        halfBoardCheckBox.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        halfBoardCheckBox.setText("Half Board");
        halfBoardCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                halfBoardCheckBoxActionPerformed(evt);
            }
        });

        bnbCheckBox.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        bnbCheckBox.setText("Bread & Breakfast");
        bnbCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bnbCheckBoxActionPerformed(evt);
            }
        });

        confirm.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        confirm.setText("Confirm");
        confirm.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                confirmActionPerformed(evt);
            }
        });

        update.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        update.setText("Update");

        cancle.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        cancle.setText("Cancle");
        cancle.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancleActionPerformed(evt);
            }
        });

        back.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        back.setText("Back");
        back.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backActionPerformed(evt);
            }
        });

        reservationDetailsTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        reservationDetailsTable.addAncestorListener(new javax.swing.event.AncestorListener() {
            public void ancestorAdded(javax.swing.event.AncestorEvent evt) {
                reservationDetailsTableAncestorAdded(evt);
            }
            public void ancestorMoved(javax.swing.event.AncestorEvent evt) {
            }
            public void ancestorRemoved(javax.swing.event.AncestorEvent evt) {
            }
        });
        jScrollPane1.setViewportView(reservationDetailsTable);

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 36)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Reservation Management System");

        arrivalDateChooser.addAncestorListener(new javax.swing.event.AncestorListener() {
            public void ancestorAdded(javax.swing.event.AncestorEvent evt) {
                arrivalDateChooserAncestorAdded(evt);
            }
            public void ancestorMoved(javax.swing.event.AncestorEvent evt) {
            }
            public void ancestorRemoved(javax.swing.event.AncestorEvent evt) {
            }
        });

        departureDateChooser.addAncestorListener(new javax.swing.event.AncestorListener() {
            public void ancestorAdded(javax.swing.event.AncestorEvent evt) {
                departureDateChooserAncestorAdded(evt);
            }
            public void ancestorMoved(javax.swing.event.AncestorEvent evt) {
            }
            public void ancestorRemoved(javax.swing.event.AncestorEvent evt) {
            }
        });

        reservationId.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        reservationId.setText("Reservation ID");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(confirm)
                                .addGap(50, 50, 50)
                                .addComponent(update)
                                .addGap(47, 47, 47)
                                .addComponent(cancle)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(back)
                                .addGap(30, 30, 30))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(reservationId)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(roomCatogory)
                                        .addGap(18, 18, 18)
                                        .addComponent(selectFloorCombBox, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(74, 74, 74)
                                        .addComponent(roomNumber)
                                        .addGap(18, 18, 18)
                                        .addComponent(roomNumberBox, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(departureDate)
                                            .addComponent(arrivalDate))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(departureDateChooser, javax.swing.GroupLayout.DEFAULT_SIZE, 207, Short.MAX_VALUE)
                                            .addComponent(arrivalDateChooser, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                            .addComponent(fullBoardCheckBox)
                                            .addGap(72, 72, 72)
                                            .addComponent(halfBoardCheckBox)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(bnbCheckBox))
                                        .addComponent(roomDetailsText, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 437, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                                .addComponent(reservationDate)
                                                .addGap(18, 18, 18)
                                                .addComponent(reservationDateChooser, javax.swing.GroupLayout.PREFERRED_SIZE, 184, javax.swing.GroupLayout.PREFERRED_SIZE))
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(customerId)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                                    .addComponent(reservationIdText)
                                                    .addComponent(customerIdText, javax.swing.GroupLayout.DEFAULT_SIZE, 190, Short.MAX_VALUE))))
                                        .addGap(18, 18, 18)
                                        .addComponent(searchCustomer))
                                    .addComponent(customerDetailsLable, javax.swing.GroupLayout.PREFERRED_SIZE, 422, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 37, Short.MAX_VALUE)))
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 21, Short.MAX_VALUE)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(67, 67, 67)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(reservationId)
                            .addComponent(reservationIdText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(customerId)
                            .addComponent(customerIdText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(searchCustomer))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(customerDetailsLable, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(12, 12, 12)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(reservationDate)
                            .addComponent(reservationDateChooser, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(roomCatogory)
                            .addComponent(selectFloorCombBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(roomNumber)
                            .addComponent(roomNumberBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(roomDetailsText, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(fullBoardCheckBox)
                                    .addComponent(halfBoardCheckBox)
                                    .addComponent(bnbCheckBox))
                                .addGap(26, 26, 26)
                                .addComponent(arrivalDate)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(departureDate))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(arrivalDateChooser, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(departureDateChooser, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(28, 28, 28)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(confirm)
                            .addComponent(update)
                            .addComponent(cancle)
                            .addComponent(back))))
                .addContainerGap(27, Short.MAX_VALUE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void searchCustomerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchCustomerActionPerformed
        searchCustomer();// TODO add your handling code here:
    }//GEN-LAST:event_searchCustomerActionPerformed

    private void reservationDateChooserAncestorAdded(javax.swing.event.AncestorEvent evt) {//GEN-FIRST:event_reservationDateChooserAncestorAdded
        // TODO add your handling code here:
    }//GEN-LAST:event_reservationDateChooserAncestorAdded

    private void selectFloorCombBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selectFloorCombBoxActionPerformed
        selectFloor();// TODO add your handling code here:
    }//GEN-LAST:event_selectFloorCombBoxActionPerformed

    private void roomNumberBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_roomNumberBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_roomNumberBoxActionPerformed

    private void bnbCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bnbCheckBoxActionPerformed
        bnb();// TODO add your handling code here:
    }//GEN-LAST:event_bnbCheckBoxActionPerformed

    private void halfBoardCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_halfBoardCheckBoxActionPerformed
        halfBoard();// TODO add your handling code here:
    }//GEN-LAST:event_halfBoardCheckBoxActionPerformed

    private void fullBoardCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fullBoardCheckBoxActionPerformed
        fullBoard();// TODO add your handling code here:
    }//GEN-LAST:event_fullBoardCheckBoxActionPerformed

    private void confirmActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_confirmActionPerformed
        confirm();// TODO add your handling code here:
    }//GEN-LAST:event_confirmActionPerformed

    private void backActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backActionPerformed
        back();// TODO add your handling code here:
    }//GEN-LAST:event_backActionPerformed

    private void cancleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancleActionPerformed
        cancel();// TODO add your handling code here:
    }//GEN-LAST:event_cancleActionPerformed

    private void arrivalDateChooserAncestorAdded(javax.swing.event.AncestorEvent evt) {//GEN-FIRST:event_arrivalDateChooserAncestorAdded
        setArrivalDate();// TODO add your handling code here:
    }//GEN-LAST:event_arrivalDateChooserAncestorAdded

    private void departureDateChooserAncestorAdded(javax.swing.event.AncestorEvent evt) {//GEN-FIRST:event_departureDateChooserAncestorAdded
        setDepartureDate();// TODO add your handling code here:
    }//GEN-LAST:event_departureDateChooserAncestorAdded

    private void reservationDetailsTableAncestorAdded(javax.swing.event.AncestorEvent evt) {//GEN-FIRST:event_reservationDetailsTableAncestorAdded
        searchReservation();// TODO add your handling code here:
    }//GEN-LAST:event_reservationDetailsTableAncestorAdded

    /**
     * @param args the command line arguments
     */

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel arrivalDate;
    private com.toedter.calendar.JDateChooser arrivalDateChooser;
    private javax.swing.JButton back;
    private javax.swing.JCheckBox bnbCheckBox;
    private javax.swing.JButton cancle;
    private javax.swing.JButton confirm;
    private javax.swing.JLabel customerDetailsLable;
    private javax.swing.JLabel customerId;
    private javax.swing.JTextField customerIdText;
    private javax.swing.JLabel departureDate;
    private com.toedter.calendar.JDateChooser departureDateChooser;
    private javax.swing.JCheckBox fullBoardCheckBox;
    private javax.swing.JCheckBox halfBoardCheckBox;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel reservationDate;
    private com.toedter.calendar.JDateChooser reservationDateChooser;
    private javax.swing.JTable reservationDetailsTable;
    private javax.swing.JLabel reservationId;
    private javax.swing.JTextField reservationIdText;
    private javax.swing.JLabel roomCatogory;
    private javax.swing.JLabel roomDetailsText;
    private javax.swing.JLabel roomNumber;
    private javax.swing.JComboBox<String> roomNumberBox;
    private javax.swing.JButton searchCustomer;
    private javax.swing.JComboBox<String> selectFloorCombBox;
    private javax.swing.JButton update;
    // End of variables declaration//GEN-END:variables

    private void back() {
        dispose();
        new MainPageView().setVisible(true);
    }

    private void searchCustomer() {
        String custId = customerIdText.getText();
        try {
            CustomerDto customerDto = customerController.getCustomer(custId);
            if (customerDto != null) {
                customerDetailsLable.setText(customerDto.getCustomerTitle() + " " + customerDto.getCustomerFirstName() + " " +customerDto.getCustomerLastName());
            } else {
                JOptionPane.showMessageDialog(this, "Cuustomer Not Found");
            }
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage());
            Logger.getLogger(ReservationView.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    private void selectFloor() {
        int selectedFloor = Integer.parseInt(selectFloorCombBox.getSelectedItem().toString());
    }
    

    private void confirm() {
        ReservationDto reservationDto = new ReservationDto();
        reservationDto.setReservationId(reservationIdText.getText());
        reservationDto.setCustomerId(customerIdText.getText());
        
        
        reservationDto.setRomCatogory((String) selectFloorCombBox.getSelectedItem());
        reservationDto.setRoomNumber((String) roomNumberBox.getSelectedItem());

        if (fullBoardCheckBox.isSelected()) {
            reservationDto.setFullBoard(true);
        } else if (halfBoardCheckBox.isSelected()) {
            reservationDto.setHalfBoard(false);
        } else if (bnbCheckBox.isSelected()) {
            reservationDto.setBreadAndBreakfast(false);
        }

        reservationDto.setArrivalDate(arrivalDateChooser.getDate());
        reservationDto.setDepartureDate(departureDateChooser.getDate());

        Date arrivalDate = arrivalDateChooser.getDate();
        Date departureDate = departureDateChooser.getDate();

        // Validate departure date against arrival date
        if (arrivalDate != null && departureDate != null && departureDate.before(arrivalDate)) {
            JOptionPane.showMessageDialog(this, "Departure date cannot be before arrival date");
            return; // Do not proceed with confirmation
        }
        
        
        reservationDto.setArrivalDate(arrivalDate);
        reservationDto.setDepartureDate(departureDate);

        try {
            String result = reservationController.confirm(reservationDto);
            JOptionPane.showMessageDialog(this, result);
            clear();
            loadRooms();
            loadRoomCatogory();
            loadTable();
        } catch (Exception ex) {
            Logger.getLogger(RoomCatogoryView.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(this, ex.getMessage());
        }
    }

    private void cancel() {
        try {
            String reservationId = reservationIdText.getText();
            String resp = reservationController.cancleReservation(reservationId);
            JOptionPane.showMessageDialog(this, resp);
            loadTable();
            clear();
        } catch (Exception ex) {
            Logger.getLogger(CustomerView.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(this, ex.getMessage());
        }
    }

    private void loadTable() {
        try {
            String[] columns = {"Reservation ID", "Customer ID", "Floor", "Room Number", "Full Board", "Half Board", "Bread & Breakfast", "Arrival Date", "Departure Date"};
            DefaultTableModel dtm = new DefaultTableModel(columns, 0) {
                @Override
                public boolean isCellEditable(int row, int column) {
                    return false;
                }

            };
            reservationDetailsTable.setModel(dtm);

            List<ReservationDto> reservationDtos = reservationController.getAllReservations();

            for (ReservationDto reservationDto : reservationDtos) {
                Object[] rowData = {reservationDto.getReservationId(), reservationDto.getCustomerId(), reservationDto.getRomCatogory(), reservationDto.getRoomNumber(), reservationDto.isFullBoard(), reservationDto.isHalfBoard(), reservationDto.isBreadAndBreakfast(), reservationDto.getArrivalDate(), reservationDto.getDepartureDate()};
                dtm.addRow(rowData);
            }

        } catch (Exception ex) {
            Logger.getLogger(ReservationView.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(this, ex.getMessage());
        }
    }
    
    private void clear() {
        reservationIdText.setText("");
        customerIdText.setText("");
        customerDetailsLable.setText("");
        selectFloorCombBox.setSelectedIndex(0);
        roomNumberBox.setSelectedIndex(0);
        fullBoardCheckBox.setSelected(false);
        halfBoardCheckBox.setSelected(false);
        bnbCheckBox.setSelected(false);
    }

    

    private void loadRoomCatogory() {
        try {
            List<RoomCatogoryDto> roomCatogoryDtos = roomCatogoryController.getRoomCatogory();
            DefaultComboBoxModel<String> comboBoxModel = new DefaultComboBoxModel<>();
            
            selectFloorCombBox.setModel(comboBoxModel);

            for (RoomCatogoryDto roomCatogoryDto : roomCatogoryDtos) {
                comboBoxModel.addElement(roomCatogoryDto.getRoomCatogoryName());
            }

        } catch (Exception ex) {
            Logger.getLogger(RoomCatogoryView.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(this, ex.getMessage());
        }
    }

    private void bnb() {
        if (bnbCheckBox.isSelected()) {
            halfBoardCheckBox.setSelected(false);
            fullBoardCheckBox.setSelected(false);
        }
    }

    private void halfBoard() {
        if (halfBoardCheckBox.isSelected()) {
            bnbCheckBox.setSelected(false);
            fullBoardCheckBox.setSelected(false);
        }
    }

    private void fullBoard() {
        if (fullBoardCheckBox.isSelected()) {
            bnbCheckBox.setSelected(false);
            halfBoardCheckBox.setSelected(false);
        }
    }

    private void loadRooms() {
        try {
            List<RoomDto> roomDtos = roomController.getRoom();
            DefaultComboBoxModel<String> comboBoxModel = new DefaultComboBoxModel<>();
            
            roomNumberBox.setModel(comboBoxModel);

            for (RoomDto roomDto : roomDtos) {
                comboBoxModel.addElement(roomDto.getRoomId());
            }

        } catch (Exception ex) {
            Logger.getLogger(RoomCatogoryView.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(this, ex.getMessage());
        }
    }

    private void setArrivalDate() {
        Date currentDate = new Date();
        Date selectedDate = arrivalDateChooser.getDate();

        if (selectedDate != null && selectedDate.before(currentDate)) {
            JOptionPane.showMessageDialog(this, "Arrival date cannot be in the past");
            arrivalDateChooser.setDate(currentDate);
        }
    }

    private void setDepartureDate() {
        Date currentDate = new Date();
        Date selectedDate = departureDateChooser.getDate();

        if (selectedDate != null && selectedDate.before(currentDate)) {
            JOptionPane.showMessageDialog(this, "Departure date cannot be in the past");
            arrivalDateChooser.setDate(currentDate);
        }
    }

    private void searchReservation() {
        String reservationId = reservationDetailsTable.getValueAt(reservationDetailsTable.getSelectedRow(), 0).toString();
        try {
            ReservationDto reservationDto = reservationController.getReservation(reservationId);

            if (reservationId != null) {
                reservationIdText.setText(reservationDto.getReservationId());
                customerIdText.setText(reservationDto.getCustomerId());
                selectFloorCombBox.setSelectedItem(reservationDto.getRomCatogory());
                roomNumberBox.setSelectedItem(reservationDto.getRoomNumber());
                fullBoardCheckBox.setSelected(reservationDto.isFullBoard());
                halfBoardCheckBox.setSelected(reservationDto.isHalfBoard());
                bnbCheckBox.setSelected(reservationDto.isBreadAndBreakfast());
                arrivalDateChooser.setDate(reservationDto.getArrivalDate());
                departureDateChooser.setDate(reservationDto.getDepartureDate());
            } else {
                JOptionPane.showMessageDialog(this, "Room Not Found");
            }
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage());
        }
    }
}
