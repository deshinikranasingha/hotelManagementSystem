/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package hotel.management.view;

import hotel.management.controller.CustomerController;
import hotel.management.controller.ReservationController;
import hotel.management.controller.RoomCatogoryController;
import hotel.management.controller.RoomController;
import hotel.management.dto.CustomerDto;
import hotel.management.dto.ReservationDetailsDto;

import hotel.management.dto.ReservationDto;
import hotel.management.dto.RoomCatogoryDto;
import hotel.management.dto.RoomDto;
import hotel.management.view.MainPageView;
import java.awt.event.MouseListener;
import java.text.SimpleDateFormat;
import java.time.LocalDate;
import java.time.ZoneId;
import java.time.temporal.ChronoUnit;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.SwingUtilities;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Deshini
 */
public class ReservationView extends javax.swing.JFrame {

    private CustomerController customerController;
    private RoomController roomController;
    private RoomCatogoryController roomCatogoryController;
    private ReservationController reservationController;

    List<ReservationDetailsDto> reservationDetailsList = new ArrayList<>();

    /**
     * Creates new form ReservationView
     */
    public ReservationView() {
        customerController = new CustomerController();
        roomController = new RoomController();
        roomCatogoryController = new RoomCatogoryController();
        reservationController = new ReservationController();

        initComponents();
        loadTable();
        setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        searchRoomCategory();
        getRoomsFromSpecificCategory();

        SwingUtilities.invokeLater(() -> {
            // Start your always-running operation or thread here
            startAlwaysRunningTask();
        });
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        selectFloorCombBox = new javax.swing.JComboBox<>();
        customerId = new javax.swing.JLabel();
        customerIdText = new javax.swing.JTextField();
        searchCustomer = new javax.swing.JButton();
        roomCatogory = new javax.swing.JLabel();
        roomNumber = new javax.swing.JLabel();
        roomNumberBox = new javax.swing.JComboBox<>();
        customerDetailsLable = new javax.swing.JLabel();
        arrivalDate = new javax.swing.JLabel();
        departureDate = new javax.swing.JLabel();
        add = new javax.swing.JButton();
        update = new javax.swing.JButton();
        delete = new javax.swing.JButton();
        back = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        reservationDetailsTable = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        arrivalDateChooser = new com.toedter.calendar.JDateChooser();
        departureDateChooser = new com.toedter.calendar.JDateChooser();
        reservationId = new javax.swing.JLabel();
        reservationIdText = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        packageCombBox = new javax.swing.JComboBox<>();
        confirm = new javax.swing.JButton();
        cancle = new javax.swing.JButton();
        roomCatogorySelector = new javax.swing.JComboBox<>();
        roomNumberText = new javax.swing.JTextField();

        selectFloorCombBox.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        selectFloorCombBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        selectFloorCombBox.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                selectFloorCombBoxItemStateChanged(evt);
            }
        });
        selectFloorCombBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectFloorCombBoxActionPerformed(evt);
            }
        });

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);

        customerId.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        customerId.setText("Customer ID");

        searchCustomer.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        searchCustomer.setText("Search");
        searchCustomer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchCustomerActionPerformed(evt);
            }
        });

        roomCatogory.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        roomCatogory.setText("Room Catogory");

        roomNumber.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        roomNumber.setText("Room Number");

        roomNumberBox.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        roomNumberBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        roomNumberBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                roomNumberBoxActionPerformed(evt);
            }
        });

        customerDetailsLable.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N

        arrivalDate.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        arrivalDate.setText("Arriavle Date");

        departureDate.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        departureDate.setText("Departure Date");

        add.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        add.setText("Add");
        add.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addActionPerformed(evt);
            }
        });

        update.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        update.setText("Update");

        delete.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        delete.setText("Delete");
        delete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteActionPerformed(evt);
            }
        });

        back.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        back.setText("Back");
        back.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backActionPerformed(evt);
            }
        });

        reservationDetailsTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        reservationDetailsTable.addAncestorListener(new javax.swing.event.AncestorListener() {
            public void ancestorAdded(javax.swing.event.AncestorEvent evt) {
                reservationDetailsTableAncestorAdded(evt);
            }
            public void ancestorMoved(javax.swing.event.AncestorEvent evt) {
            }
            public void ancestorRemoved(javax.swing.event.AncestorEvent evt) {
            }
        });
        jScrollPane1.setViewportView(reservationDetailsTable);

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 36)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Reservation Management System");

        arrivalDateChooser.addAncestorListener(new javax.swing.event.AncestorListener() {
            public void ancestorAdded(javax.swing.event.AncestorEvent evt) {
                arrivalDateChooserAncestorAdded(evt);
            }
            public void ancestorMoved(javax.swing.event.AncestorEvent evt) {
            }
            public void ancestorRemoved(javax.swing.event.AncestorEvent evt) {
            }
        });

        departureDateChooser.addAncestorListener(new javax.swing.event.AncestorListener() {
            public void ancestorAdded(javax.swing.event.AncestorEvent evt) {
                departureDateChooserAncestorAdded(evt);
            }
            public void ancestorMoved(javax.swing.event.AncestorEvent evt) {
            }
            public void ancestorRemoved(javax.swing.event.AncestorEvent evt) {
            }
        });

        reservationId.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        reservationId.setText("Reservation ID");

        jLabel2.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel2.setText("Package");

        packageCombBox.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        packageCombBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Full Board", "Half Board", "Bread & Breakfast" }));
        packageCombBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                packageCombBoxActionPerformed(evt);
            }
        });

        confirm.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        confirm.setText("Confirm Reservation");
        confirm.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                confirmActionPerformed(evt);
            }
        });

        cancle.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        cancle.setText("Cancle Reservation");
        cancle.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancleActionPerformed(evt);
            }
        });

        roomCatogorySelector.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        roomCatogorySelector.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                roomCatogorySelectorActionPerformed(evt);
            }
        });

        roomNumberText.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 994, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                        .addComponent(customerId)
                                        .addGap(18, 18, 18)
                                        .addComponent(customerIdText))
                                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                        .addComponent(reservationId)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(reservationIdText, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGap(18, 18, 18)
                                .addComponent(searchCustomer))
                            .addComponent(customerDetailsLable, javax.swing.GroupLayout.PREFERRED_SIZE, 422, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(20, 20, 20)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(confirm)
                                        .addGap(46, 46, 46)
                                        .addComponent(cancle)
                                        .addGap(60, 60, 60)
                                        .addComponent(back))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(roomNumber)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(roomNumberBox, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(roomNumberText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(roomCatogory)
                                    .addComponent(jLabel2))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(packageCombBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(roomCatogorySelector, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(arrivalDate)
                                    .addComponent(departureDate))
                                .addGap(35, 35, 35)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(departureDateChooser, javax.swing.GroupLayout.PREFERRED_SIZE, 148, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(arrivalDateChooser, javax.swing.GroupLayout.PREFERRED_SIZE, 148, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(82, 82, 82)
                                .addComponent(add)
                                .addGap(77, 77, 77)
                                .addComponent(update)
                                .addGap(65, 65, 65)
                                .addComponent(delete)))
                        .addGap(58, 58, 58)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 411, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(reservationId)
                            .addComponent(reservationIdText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(customerId)
                            .addComponent(customerIdText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(searchCustomer))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(customerDetailsLable, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(roomCatogory)
                            .addComponent(roomNumber)
                            .addComponent(roomNumberBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(roomCatogorySelector, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(roomNumberText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(packageCombBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(arrivalDate)
                            .addComponent(arrivalDateChooser, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(departureDate)
                            .addComponent(departureDateChooser, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(28, 28, 28)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(add)
                            .addComponent(update)
                            .addComponent(delete)))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 323, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(12, 12, 12)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(confirm)
                    .addComponent(cancle)
                    .addComponent(back))
                .addContainerGap(14, Short.MAX_VALUE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void searchCustomerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchCustomerActionPerformed
        searchCustomer();// TODO add your handling code here:
    }//GEN-LAST:event_searchCustomerActionPerformed

    private void reservationDateChooserAncestorAdded(javax.swing.event.AncestorEvent evt) {//GEN-FIRST:event_reservationDateChooserAncestorAdded
        // TODO add your handling code here:
    }//GEN-LAST:event_reservationDateChooserAncestorAdded

    private void selectFloorCombBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selectFloorCombBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_selectFloorCombBoxActionPerformed

    private void roomNumberBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_roomNumberBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_roomNumberBoxActionPerformed

    private void addActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addActionPerformed
        reserveRooms();// TODO add your handling code here:
    }//GEN-LAST:event_addActionPerformed

    private void backActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backActionPerformed
        back();// TODO add your handling code here:
    }//GEN-LAST:event_backActionPerformed

    private void deleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteActionPerformed
        cancel();// TODO add your handling code here:
    }//GEN-LAST:event_deleteActionPerformed

    private void arrivalDateChooserAncestorAdded(javax.swing.event.AncestorEvent evt) {//GEN-FIRST:event_arrivalDateChooserAncestorAdded
        setArrivalDate();// TODO add your handling code here:
    }//GEN-LAST:event_arrivalDateChooserAncestorAdded

    private void departureDateChooserAncestorAdded(javax.swing.event.AncestorEvent evt) {//GEN-FIRST:event_departureDateChooserAncestorAdded
        setDepartureDate();// TODO add your handling code here:
    }//GEN-LAST:event_departureDateChooserAncestorAdded

    private void reservationDetailsTableAncestorAdded(javax.swing.event.AncestorEvent evt) {//GEN-FIRST:event_reservationDetailsTableAncestorAdded
       // TODO add your handling code here:
    }//GEN-LAST:event_reservationDetailsTableAncestorAdded

    private void packageCombBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_packageCombBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_packageCombBoxActionPerformed

    private void confirmActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_confirmActionPerformed
        confirm();// TODO add your handling code here:
    }//GEN-LAST:event_confirmActionPerformed

    private void cancleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancleActionPerformed
        cancleReservation();// TODO add your handling code here:
    }//GEN-LAST:event_cancleActionPerformed

    private void selectFloorCombBoxItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_selectFloorCombBoxItemStateChanged
        getRoomsFromSpecificCategory();// TODO add your handling code here:
    }//GEN-LAST:event_selectFloorCombBoxItemStateChanged

    private void roomCatogorySelectorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_roomCatogorySelectorActionPerformed
        searchRoomCatogory();// TODO add your handling code here:
    }//GEN-LAST:event_roomCatogorySelectorActionPerformed

    /**
     * @param args the command line arguments
     */

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton add;
    private javax.swing.JLabel arrivalDate;
    private com.toedter.calendar.JDateChooser arrivalDateChooser;
    private javax.swing.JButton back;
    private javax.swing.JButton cancle;
    private javax.swing.JButton confirm;
    private javax.swing.JLabel customerDetailsLable;
    private javax.swing.JLabel customerId;
    private javax.swing.JTextField customerIdText;
    private javax.swing.JButton delete;
    private javax.swing.JLabel departureDate;
    private com.toedter.calendar.JDateChooser departureDateChooser;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JComboBox<String> packageCombBox;
    private javax.swing.JTable reservationDetailsTable;
    private javax.swing.JLabel reservationId;
    private javax.swing.JTextField reservationIdText;
    private javax.swing.JLabel roomCatogory;
    private javax.swing.JComboBox<String> roomCatogorySelector;
    private javax.swing.JLabel roomNumber;
    private javax.swing.JComboBox<String> roomNumberBox;
    private javax.swing.JTextField roomNumberText;
    private javax.swing.JButton searchCustomer;
    private javax.swing.JComboBox<String> selectFloorCombBox;
    private javax.swing.JButton update;
    // End of variables declaration//GEN-END:variables

    private void back() {
        dispose();
        new MainPageView().setVisible(true);
    }

    private void searchCustomer() {
        String custId = customerIdText.getText();
        try {
            CustomerDto customerDto = customerController.getCustomer(custId);
            if (customerDto != null) {
                customerDetailsLable.setText(customerDto.getCustomerTitle() + " " + customerDto.getCustomerFirstName() + " " + customerDto.getCustomerLastName());
            } else {
                JOptionPane.showMessageDialog(this, "Cuustomer Not Found");
            }
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage());
            Logger.getLogger(ReservationView.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void searchRoomCategory() {

        DefaultComboBoxModel<String> comboBoxModel = new DefaultComboBoxModel<>();
        roomCatogorySelector.setModel(comboBoxModel);

        try {

            List<RoomCatogoryDto> list = roomCatogoryController.loadCategory();
            for (RoomCatogoryDto r : list) {

                comboBoxModel.addElement(r.getRoomCatogoryName());

            }

        } catch (Exception ex) {
            Logger.getLogger(ReservationView.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(this, ex.getMessage());
        }
    }

    private void confirm() {
        SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");

        try {

            ReservationDetailsDto reservationDetailsDto = new ReservationDetailsDto();

            reservationDetailsDto.setRoomId((String) roomNumberBox.getSelectedItem());
            reservationDetailsDto.setArrivalDate(arrivalDateChooser.getDate());
            reservationDetailsDto.setDepartureDate(departureDateChooser.getDate());
            reservationDetailsDto.setPakage((String) packageCombBox.getSelectedItem());
            reservationDetailsDto.setRoomCategory((String) roomCatogorySelector.getSelectedItem());

            LocalDate localDateIn = arrivalDateChooser.getDate().toInstant().atZone(ZoneId.systemDefault()).toLocalDate();
            LocalDate localDateOut = departureDateChooser.getDate().toInstant().atZone(ZoneId.systemDefault()).toLocalDate();
            long numOfDays = ChronoUnit.DAYS.between(localDateIn, localDateOut);
            double price = reservationController.getPrice(numOfDays, (String) roomCatogorySelector.getSelectedItem(), (String) packageCombBox.getSelectedItem());
            reservationDetailsDto.setPrice(price);

            if (reservationController.roomAvailablity(reservationDetailsDto)) {

                reservationDetailsList.add(reservationDetailsDto);

                Object[] obj = {reservationDetailsDto.getRoomId(), sdf.format(reservationDetailsDto.getArrivalDate()), sdf.format(reservationDetailsDto.getDepartureDate()), numOfDays, reservationDetailsDto.getPakage(), reservationDetailsDto.getRoomCategory(), price};

                DefaultTableModel dtm = (DefaultTableModel) reservationDetailsTable.getModel();
                dtm.addRow(obj);
            } else {

                JOptionPane.showMessageDialog(this, "This room is alredy book in selected period");

            }

        } catch (Exception ex) {
            Logger.getLogger(ReservationView.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(this, ex.getMessage());
        }

    }

    private void loadTable() {
        String[] columns = {"Room","Arrival Date","Departure Date","Number of Days","Package","Category","Price"};
           DefaultTableModel dtm = new DefaultTableModel(columns,0){
       
       @Override
       public boolean isCellEditable(int row, int column) {
                return false;
            }
       
       };
       
       reservationDetailsTable.setModel(dtm);
       
       reservationDetailsTable.getColumnModel().getColumn(0).setPreferredWidth(50);
       reservationDetailsTable.getColumnModel().getColumn(1).setPreferredWidth(100);
       reservationDetailsTable.getColumnModel().getColumn(2).setPreferredWidth(100);
       reservationDetailsTable.getColumnModel().getColumn(3).setPreferredWidth(50);
   
    }
    
    private void clear() {
        reservationIdText.setText("");
        customerIdText.setText("");
        customerDetailsLable.setText("");
        selectFloorCombBox.setSelectedIndex(0);
        roomNumberBox.setSelectedIndex(0);
        packageCombBox.setSelectedIndex(0);
    }

    

    private void loadRoomCatogory() {
        try {
            List<RoomCatogoryDto> roomCatogoryDtos = roomCatogoryController.getRoomCatogory();
            DefaultComboBoxModel<String> comboBoxModel = new DefaultComboBoxModel<>();
            
            selectFloorCombBox.setModel(comboBoxModel);

            for (RoomCatogoryDto roomCatogoryDto : roomCatogoryDtos) {
                comboBoxModel.addElement(roomCatogoryDto.getRoomCatogoryName());
            }

        } catch (Exception ex) {
            Logger.getLogger(RoomCatogoryView.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(this, ex.getMessage());
        }
    }

    private void loadRooms() {
        try {
            List<RoomDto> roomDtos = roomController.getRoom();
            DefaultComboBoxModel<String> comboBoxModel = new DefaultComboBoxModel<>();
            
            roomNumberBox.setModel(comboBoxModel);

            for (RoomDto roomDto : roomDtos) {
                comboBoxModel.addElement(roomDto.getRoomId());
            }

        } catch (Exception ex) {
            Logger.getLogger(RoomCatogoryView.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(this, ex.getMessage());
        }
    }

    private void setArrivalDate() {
        Date currentDate = new Date();
        Date selectedDate = arrivalDateChooser.getDate();

        if (selectedDate != null && selectedDate.before(currentDate)) {
            JOptionPane.showMessageDialog(this, "Arrival date cannot be in the past");
            arrivalDateChooser.setDate(currentDate);
        }
    }

    private void setDepartureDate() {
        Date currentDate = new Date();
        Date selectedDate = departureDateChooser.getDate();

        if (selectedDate != null && selectedDate.before(currentDate)) {
            JOptionPane.showMessageDialog(this, "Departure date cannot be in the past");
            arrivalDateChooser.setDate(currentDate);
        }
    }

    private void getRoomsFromSpecificCategory() {
        DefaultComboBoxModel<String> comboBoxModel = new DefaultComboBoxModel<>();
        roomNumberBox.setModel(comboBoxModel);
        String category = (String) roomCatogorySelector.getSelectedItem();

        try {

            List<RoomDto> list = roomController.getRoomsFromSpecificCategory(category);

            for (RoomDto r : list) {

                comboBoxModel.addElement(r.getRoomId());

            }

        } catch (Exception ex) {
            Logger.getLogger(ReservationView.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(this, ex.getMessage());
        }
    }

    private void startAlwaysRunningTask() {
    
    Thread alwaysRunningThread = new Thread(() -> {
            while (true) {
               
                arrivalDateChooser.setMinSelectableDate(new Date());
                
                if(arrivalDateChooser.getDate()!=null){
                    
                Calendar calendar = Calendar.getInstance();
                calendar.setTime(arrivalDateChooser.getDate());
                calendar.add(Calendar.DAY_OF_YEAR, 1);
                departureDateChooser.setMinSelectableDate(calendar.getTime());
                }
                
                try {
                    Thread.sleep(1000); // Sleep for 1 second
                } catch (InterruptedException ex) {
                    ex.printStackTrace();
                }
            }
        });
        alwaysRunningThread.start();
    
    
    }


    private void reservation() {
        throw new UnsupportedOperationException("Not supported yet."); // Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/GeneratedMethodBody
    }

    private void cancleReservation() {
        
        String resId  = reservationIdText.getText();
        String roomId = roomNumberText.getText();
        try { 
            
            String result = reservationController.deleteReservation(resId,roomId);
            JOptionPane.showMessageDialog(this, result);
            clearCancelText();
                     
        } catch (Exception ex) {
            Logger.getLogger(ReservationView.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(this, ex.getMessage());
        }
         
           
        throw new UnsupportedOperationException("Not supported yet."); // Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/GeneratedMethodBody
    }

    private void cancel() {
        throw new UnsupportedOperationException("Not supported yet."); // Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/GeneratedMethodBody
    }

    private void reserveRooms() {
    try {
        ReservationDto reservationDto = new ReservationDto(reservationIdText.getText(), new Date(), Integer.valueOf(customerIdText.getText()), reservationDetailsList);

        String result = reservationController.reserve(reservationDto);
        JOptionPane.showMessageDialog(this, result);

        reservationDetailsList.clear();
        clearText();

        DefaultTableModel dtm = (DefaultTableModel) reservationDetailsTable.getModel();

        int rowCount = dtm.getRowCount();
        for (int i = rowCount - 1; i >= 0; i--) {
            dtm.removeRow(i);
        }

    } catch (Exception ex) {
        Logger.getLogger(ReservationView.class.getName()).log(Level.SEVERE, null, ex);
        JOptionPane.showMessageDialog(this, ex.getMessage());
    }
}


    private void searchRoomCatogory() {
        DefaultComboBoxModel<String> comboBoxModel = new DefaultComboBoxModel<>();
        packageCombBox.setModel(comboBoxModel);
       
        try {
            
            List<RoomCatogoryDto> list = roomCatogoryController.loadCategory();
            for (RoomCatogoryDto r:list){
            
            comboBoxModel.addElement(r.getRoomCatogoryName());
            
            }
            
        } catch (Exception ex) {
            Logger.getLogger(ReservationView.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(this, ex.getMessage());
        }
       
    }

    private void clearText() {
        reservationIdText.setText("");
        roomNumberText.setText("");
    }

    private void clearCancelText() {
    }
}
