/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package hotel.management.view;

import hotel.management.controller.RoomCatogoryController;
import hotel.management.dto.RoomCatogoryDto;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Deshini
 */
public class RoomCatogoryView extends javax.swing.JFrame {
    
    private final RoomCatogoryController roomCatogoryController;

    /**
     * Creates new form RoomCatogoryView
     */
    public RoomCatogoryView() {
        roomCatogoryController = new RoomCatogoryController();
        initComponents();
        loadRoomCatogory();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        headerLable = new javax.swing.JLabel();
        roomCatogoryId = new javax.swing.JLabel();
        roomCatogoryName = new javax.swing.JLabel();
        fullBoardPrice = new javax.swing.JLabel();
        halfBoardPrice = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        roomCatogoryIdText = new javax.swing.JTextField();
        roomCatogoryNameText = new javax.swing.JTextField();
        fullBoardPriceText = new javax.swing.JTextField();
        halfBoardPriceText = new javax.swing.JTextField();
        breadAndBreakfastText = new javax.swing.JTextField();
        add = new javax.swing.JButton();
        update = new javax.swing.JButton();
        delete = new javax.swing.JButton();
        back = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        roomCatogoryDetailsTable = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);

        headerLable.setFont(new java.awt.Font("Segoe UI", 0, 36)); // NOI18N
        headerLable.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        headerLable.setText("Room Catogory Management System");

        roomCatogoryId.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        roomCatogoryId.setText("Room Catogory ID");

        roomCatogoryName.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        roomCatogoryName.setText("Room Catogory Name");

        fullBoardPrice.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        fullBoardPrice.setText("Full Board Price");

        halfBoardPrice.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        halfBoardPrice.setText("Half Board Price");

        jLabel1.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel1.setText("Bread & Breakfast Price");

        roomCatogoryIdText.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N

        roomCatogoryNameText.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N

        fullBoardPriceText.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N

        halfBoardPriceText.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N

        breadAndBreakfastText.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N

        add.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        add.setText("Add");
        add.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addActionPerformed(evt);
            }
        });

        update.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        update.setText("Update");
        update.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateActionPerformed(evt);
            }
        });

        delete.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        delete.setText("Delete");
        delete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteActionPerformed(evt);
            }
        });

        back.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        back.setText("Back");
        back.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backActionPerformed(evt);
            }
        });

        roomCatogoryDetailsTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        roomCatogoryDetailsTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                roomCatogoryDetailsTableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(roomCatogoryDetailsTable);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(headerLable, javax.swing.GroupLayout.DEFAULT_SIZE, 602, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(breadAndBreakfastText, javax.swing.GroupLayout.DEFAULT_SIZE, 251, Short.MAX_VALUE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(roomCatogoryId)
                                .addGap(33, 33, 33)
                                .addComponent(roomCatogoryIdText, javax.swing.GroupLayout.PREFERRED_SIZE, 204, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(roomCatogoryName)
                                    .addComponent(fullBoardPrice)
                                    .addComponent(halfBoardPrice))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(roomCatogoryNameText)
                                    .addComponent(fullBoardPriceText)
                                    .addComponent(halfBoardPriceText, javax.swing.GroupLayout.DEFAULT_SIZE, 251, Short.MAX_VALUE))))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGap(29, 29, 29)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 555, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(add)
                        .addGap(67, 67, 67)
                        .addComponent(update)
                        .addGap(67, 67, 67)
                        .addComponent(delete)
                        .addGap(59, 59, 59)
                        .addComponent(back)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(headerLable, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(roomCatogoryId)
                    .addComponent(roomCatogoryIdText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(roomCatogoryName)
                    .addComponent(roomCatogoryNameText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(fullBoardPrice)
                    .addComponent(fullBoardPriceText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(halfBoardPrice)
                    .addComponent(halfBoardPriceText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(breadAndBreakfastText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(add)
                    .addComponent(update)
                    .addComponent(delete)
                    .addComponent(back))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 416, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(13, Short.MAX_VALUE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void addActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addActionPerformed
        addRoomCatogory();// TODO add your handling code here:
    }//GEN-LAST:event_addActionPerformed

    private void updateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateActionPerformed
        updateRoomCatogory();// TODO add your handling code here:
    }//GEN-LAST:event_updateActionPerformed

    private void deleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteActionPerformed
        deleteRoomCatogory();// TODO add your handling code here:
    }//GEN-LAST:event_deleteActionPerformed

    private void backActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backActionPerformed
        back();// TODO add your handling code here:
    }//GEN-LAST:event_backActionPerformed

    private void roomCatogoryDetailsTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_roomCatogoryDetailsTableMouseClicked
        searchRoomCatogory();// TODO add your handling code here:
    }//GEN-LAST:event_roomCatogoryDetailsTableMouseClicked

    /**
     * @param args the command line arguments
     */

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton add;
    private javax.swing.JButton back;
    private javax.swing.JTextField breadAndBreakfastText;
    private javax.swing.JButton delete;
    private javax.swing.JLabel fullBoardPrice;
    private javax.swing.JTextField fullBoardPriceText;
    private javax.swing.JLabel halfBoardPrice;
    private javax.swing.JTextField halfBoardPriceText;
    private javax.swing.JLabel headerLable;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable roomCatogoryDetailsTable;
    private javax.swing.JLabel roomCatogoryId;
    private javax.swing.JTextField roomCatogoryIdText;
    private javax.swing.JLabel roomCatogoryName;
    private javax.swing.JTextField roomCatogoryNameText;
    private javax.swing.JButton update;
    // End of variables declaration//GEN-END:variables

    private void loadRoomCatogory() {
        try {
            String columns[] = {"RoomCatogoryID", " RoomCatogoryName", "FullBoardPrice", "HalfBoardPrice", " BreadAndBreakfastPrice"};
            DefaultTableModel defaultTableModel = new DefaultTableModel(columns, 0) {
                @Override
                public boolean isCellEditable(int row, int column) {
                    return false;
                }

            };

            roomCatogoryDetailsTable.setModel(defaultTableModel);

            List<RoomCatogoryDto> roomCatogoryDtos = roomCatogoryController.getAllRoomCatogory();

            for (RoomCatogoryDto roomCatogoryDto : roomCatogoryDtos) {
                Object[] rowData = {roomCatogoryDto.getRoomCatogoryId(), roomCatogoryDto.getRoomCatogoryName(), roomCatogoryDto.getFullBoardPrice(), roomCatogoryDto.getHalfBoardPrice(), roomCatogoryDto.getBreadAndBreakfastPrice()};
                defaultTableModel.addRow(rowData);
            }

        } catch (Exception ex) {
            Logger.getLogger(RoomCatogoryView.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(this, ex.getMessage());
        }
    }

    private void addRoomCatogory() {
        RoomCatogoryDto roomCatogoryDto = new RoomCatogoryDto();

        roomCatogoryDto.setRoomCatogoryId(roomCatogoryIdText.getText());
        roomCatogoryDto.setRoomCatogoryName(roomCatogoryNameText.getText());
        roomCatogoryDto.setFullBoardPrice(Double.parseDouble(fullBoardPriceText.getText()));
        roomCatogoryDto.setHalfBoardPrice(Double.parseDouble(halfBoardPriceText.getText()));
        roomCatogoryDto.setBreadAndBreakfastPrice(Double.parseDouble(breadAndBreakfastText.getText()));

        try {
            String result = roomCatogoryController.addRoomCatogory(roomCatogoryDto);
            JOptionPane.showMessageDialog(this, result);
            clear();
            loadRoomCatogory();
        } catch (Exception ex) {
            Logger.getLogger(RoomCatogoryView.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(this, ex.getMessage());
        }
    }

    private void updateRoomCatogory() {
        try {
            RoomCatogoryDto roomCatogoryDto = new RoomCatogoryDto();

            String roomCatogoryId = roomCatogoryIdText.getText().trim();
            if (roomCatogoryId.isEmpty()) {
                JOptionPane.showMessageDialog(this, "Room Category ID cannot be empty");
                return;
            }
            roomCatogoryDto.setRoomCatogoryId(roomCatogoryId);

            // Validate and set RoomCatogoryName
            String roomCatogoryName = roomCatogoryNameText.getText().trim();
            if (roomCatogoryName.isEmpty()) {
                JOptionPane.showMessageDialog(this, "Room Category Name cannot be empty");
                return;
            }
            roomCatogoryDto.setRoomCatogoryName(roomCatogoryName);

            // Validate and set FullBoardPrice
            try {
                double fullBoardPrice = Double.parseDouble(fullBoardPriceText.getText());
                roomCatogoryDto.setFullBoardPrice(fullBoardPrice);
            } catch (NumberFormatException ex) {
                JOptionPane.showMessageDialog(this, "Invalid Full Board Price. Please enter a valid number.");
                return;
            }

            // Validate and set HalfBoardPrice
            try {
                double halfBoardPrice = Double.parseDouble(halfBoardPriceText.getText());
                roomCatogoryDto.setHalfBoardPrice(halfBoardPrice);
            } catch (NumberFormatException ex) {
                JOptionPane.showMessageDialog(this, "Invalid Half Board Price. Please enter a valid number.");
                return;
            }

            // Validate and set BreadAndBreakfastPrice
            try {
                double breakfastPrice = Double.parseDouble(breadAndBreakfastText.getText());
                roomCatogoryDto.setBreadAndBreakfastPrice(breakfastPrice);
            } catch (NumberFormatException ex) {
                JOptionPane.showMessageDialog(this, "Invalid Breakfast Price. Please enter a valid number.");
                return;
            }

            String resp = roomCatogoryController.updateRoomCatogory(roomCatogoryDto);
            JOptionPane.showMessageDialog(this, resp);
            loadRoomCatogory();
            clear();
        } catch (Exception ex) {
            Logger.getLogger(CustomerView.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(this, ex.getMessage());
        }
    }

    private void deleteRoomCatogory() {
        try {
            String roomCatogoryId = roomCatogoryIdText.getText();
            String resp = roomCatogoryController.deleteRoomCatogory(roomCatogoryId);
            JOptionPane.showMessageDialog(this, resp);
            loadRoomCatogory();
            clear();
        } catch (Exception ex) {
            Logger.getLogger(CustomerView.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(this, ex.getMessage());
        }
    }

    private void back() {
        dispose();
        new MainPageView().setVisible(true);
    }

    private void searchRoomCatogory() {
        String roomCatogoryId = roomCatogoryDetailsTable.getValueAt(roomCatogoryDetailsTable.getSelectedRow(), 0).toString();
        try {
            RoomCatogoryDto roomCatogoryDto = roomCatogoryController.getRoomCatogory(roomCatogoryId);

            if (roomCatogoryDto != null) {
                roomCatogoryIdText.setText(roomCatogoryDto.getRoomCatogoryId());
                roomCatogoryNameText.setText(roomCatogoryDto.getRoomCatogoryName());
                fullBoardPriceText.setText(Double.toString(roomCatogoryDto.getFullBoardPrice()));
                halfBoardPriceText.setText(Double.toString(roomCatogoryDto.getHalfBoardPrice()));
                breadAndBreakfastText.setText(Double.toString(roomCatogoryDto.getBreadAndBreakfastPrice()));

            } else {
                JOptionPane.showMessageDialog(this, "Room Catogory Not Found");
            }
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage());
        }
    }

    private void clear() {
        roomCatogoryIdText.setText("");
        roomCatogoryNameText.setText("");
        fullBoardPriceText.setText("");
        halfBoardPriceText.setText("");
        breadAndBreakfastText.setText("");
    }
}
