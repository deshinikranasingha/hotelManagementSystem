/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package hotel.management.view;

import hotel.management.controller.CustomerController;
import hotel.management.dto.CustomerDto;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Deshini
 */
public class CustomerView extends javax.swing.JFrame {
    
    private final CustomerController customerController;

    /**
     * Creates new form CustomerView
     */
    public CustomerView() {
        customerController = new CustomerController();
        initComponents();
        loadCustomer();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        headingLable = new javax.swing.JLabel();
        customerId = new javax.swing.JLabel();
        customerTitle = new javax.swing.JLabel();
        firstName = new javax.swing.JLabel();
        lastName = new javax.swing.JLabel();
        nic = new javax.swing.JLabel();
        address = new javax.swing.JLabel();
        contact = new javax.swing.JLabel();
        customerIdText = new javax.swing.JTextField();
        customerTitleText = new javax.swing.JTextField();
        customerFirstNameText = new javax.swing.JTextField();
        customerLastNameText = new javax.swing.JTextField();
        customerNicText = new javax.swing.JTextField();
        customerAddressText = new javax.swing.JTextField();
        customerContactNumberText = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        customerDetailsTable = new javax.swing.JTable();
        save = new javax.swing.JButton();
        update = new javax.swing.JButton();
        delete = new javax.swing.JButton();
        back = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);

        headingLable.setFont(new java.awt.Font("Segoe UI", 0, 36)); // NOI18N
        headingLable.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        headingLable.setText("Customer Management System");

        customerId.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        customerId.setText("Customer ID");

        customerTitle.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        customerTitle.setText("Customer Title");

        firstName.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        firstName.setText("First Name");

        lastName.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        lastName.setText("Last Name");

        nic.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        nic.setText("NIC");

        address.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        address.setText("Address");

        contact.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        contact.setText("Contact");

        customerDetailsTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        customerDetailsTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                customerDetailsTableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(customerDetailsTable);

        save.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        save.setText("Save");
        save.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveActionPerformed(evt);
            }
        });

        update.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        update.setText("Update");
        update.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateActionPerformed(evt);
            }
        });

        delete.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        delete.setText("Delete");
        delete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteActionPerformed(evt);
            }
        });

        back.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        back.setText("Back");
        back.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(59, 59, 59)
                        .addComponent(save)
                        .addGap(60, 60, 60)
                        .addComponent(update)
                        .addGap(60, 60, 60)
                        .addComponent(delete)
                        .addGap(57, 57, 57)
                        .addComponent(back)
                        .addContainerGap(83, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(headingLable, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                        .addComponent(firstName)
                                        .addGap(30, 30, 30)
                                        .addComponent(customerFirstNameText, javax.swing.GroupLayout.PREFERRED_SIZE, 181, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(lastName)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(customerLastNameText))
                                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                        .addGap(294, 294, 294)
                                        .addComponent(customerTitle)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(customerTitleText, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                        .addComponent(customerId)
                                        .addGap(18, 18, 18)
                                        .addComponent(customerIdText, javax.swing.GroupLayout.PREFERRED_SIZE, 162, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                        .addComponent(contact)
                                        .addGap(48, 48, 48)
                                        .addComponent(customerContactNumberText, javax.swing.GroupLayout.PREFERRED_SIZE, 189, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(nic)
                                            .addComponent(address))
                                        .addGap(47, 47, 47)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(customerAddressText, javax.swing.GroupLayout.DEFAULT_SIZE, 495, Short.MAX_VALUE)
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(customerNicText)
                                                .addGap(314, 314, 314)))))
                                .addGap(0, 0, Short.MAX_VALUE)))
                        .addContainerGap())))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(headingLable, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(customerId)
                    .addComponent(customerIdText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(customerTitle)
                    .addComponent(customerTitleText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(firstName)
                    .addComponent(customerFirstNameText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lastName)
                    .addComponent(customerLastNameText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(nic)
                    .addComponent(customerNicText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(10, 10, 10)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(address)
                    .addComponent(customerAddressText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(contact)
                    .addComponent(customerContactNumberText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(29, 29, 29)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(save)
                    .addComponent(update)
                    .addComponent(delete)
                    .addComponent(back))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 294, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void saveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveActionPerformed
        saveCustomer();// TODO add your handling code here:
    }//GEN-LAST:event_saveActionPerformed

    private void updateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateActionPerformed
        updateCustomer();// TODO add your handling code here:
    }//GEN-LAST:event_updateActionPerformed

    private void deleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteActionPerformed
        deleteCustomer();// TODO add your handling code here:
    }//GEN-LAST:event_deleteActionPerformed

    private void backActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backActionPerformed
         back();// TODO add your handling code here:
    }//GEN-LAST:event_backActionPerformed

    private void customerDetailsTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_customerDetailsTableMouseClicked
        searchCustomer();// TODO add your handling code here:
    }//GEN-LAST:event_customerDetailsTableMouseClicked

    /**
     * @param args the command line arguments
     */

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel address;
    private javax.swing.JButton back;
    private javax.swing.JLabel contact;
    private javax.swing.JTextField customerAddressText;
    private javax.swing.JTextField customerContactNumberText;
    private javax.swing.JTable customerDetailsTable;
    private javax.swing.JTextField customerFirstNameText;
    private javax.swing.JLabel customerId;
    private javax.swing.JTextField customerIdText;
    private javax.swing.JTextField customerLastNameText;
    private javax.swing.JTextField customerNicText;
    private javax.swing.JLabel customerTitle;
    private javax.swing.JTextField customerTitleText;
    private javax.swing.JButton delete;
    private javax.swing.JLabel firstName;
    private javax.swing.JLabel headingLable;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lastName;
    private javax.swing.JLabel nic;
    private javax.swing.JButton save;
    private javax.swing.JButton update;
    // End of variables declaration//GEN-END:variables

    private void loadCustomer() {
        try {
            String columns[] = {"Customer ID", "Customer Title", " Customer First Name", " Customer Last Name", "Customer NIC", "Customer Address", " Contact Number"};
            DefaultTableModel defaultTableModel = new DefaultTableModel(columns, 0) {
                @Override
                public boolean isCellEditable(int row, int column) {
                    return false;
                }
            };

            customerDetailsTable.setModel(defaultTableModel);

            List<CustomerDto> customerDtos = customerController.getAllCustomer();

            for (CustomerDto customerDto : customerDtos) {
                Object[] rowData = {customerDto.getCustomerId(), customerDto.getCustomerTitle(),  customerDto.getCustomerFirstName(), customerDto.getCustomerLastName() , customerDto.getCustomerNic(), customerDto.getCustomerAddress(), customerDto.getCustomerContact()};
                defaultTableModel.addRow(rowData);
            }

        } catch (Exception ex) {
            Logger.getLogger(CustomerView.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(this, ex.getMessage());
        }
    }

    private void saveCustomer() {
        CustomerDto customerDto = new CustomerDto();
        
        customerDto.setCustomerId(customerIdText.getText());
        customerDto.setCustomerTitle(customerTitleText.getText());
        customerDto.setCustomerFirstName(customerFirstNameText.getText());
        customerDto.setCustomerLastName(customerLastNameText.getText());
        customerDto.setCustomerNic(customerNicText.getText());
        customerDto.setCustomerAddress(customerAddressText.getText());
        customerDto.setCustomerContact(customerContactNumberText.getText());

        try {
            String result = customerController.saveCustomer(customerDto);
            JOptionPane.showMessageDialog(this, result);
            clear();
            loadCustomer();
        } catch (Exception ex) {
            Logger.getLogger(CustomerView.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(this, ex.getMessage());
        }
    }

    private void updateCustomer() {
        try {
            CustomerDto customerDto = new CustomerDto();

            String customerId = customerIdText.getText().trim();
            if (customerId.isEmpty()) {
                JOptionPane.showMessageDialog(this, "Customer ID cannot be empty");
                return;
            }
            customerDto.setCustomerId(customerId);

            String customerTitle = customerTitleText.getText().trim();
            if (customerTitle.isEmpty()) {
                JOptionPane.showMessageDialog(this, "Customer Title cannot be empty");
                return;
            }
            customerDto.setCustomerTitle(customerTitle);
            
            String customerFirstName = customerFirstNameText.getText().trim();
            if (customerFirstName.isEmpty()) {
                JOptionPane.showMessageDialog(this, "Customer First Name cannot be empty");
                return;
            }
            customerDto.setCustomerFirstName(customerFirstName);
            
            String customerLastName = customerLastNameText.getText().trim();
            if (customerLastName.isEmpty()) {
                JOptionPane.showMessageDialog(this, "Customer Last Name cannot be empty");
                return;
            }
            customerDto.setCustomerLastName(customerLastName);
            
            String customerNic = customerNicText.getText().trim();
            if (customerNic.isEmpty()) {
                JOptionPane.showMessageDialog(this, "Customer NIC cannot be empty");
                return;
            }
            customerDto.setCustomerNic(customerNic);
            
            String customerAddress = customerAddressText.getText().trim();
            if (customerAddress.isEmpty()) {
                JOptionPane.showMessageDialog(this, "Customer Address cannot be empty");
                return;
            }
            customerDto.setCustomerAddress(customerAddress);
            
            String customerContact = customerContactNumberText.getText().trim();
            if (customerContact.isEmpty()) {
                JOptionPane.showMessageDialog(this, "Customer Contact Number cannot be empty");
                return;
            }
            customerDto.setCustomerContact(customerContact);

            String resp = customerController.updateCustomer(customerDto);
            JOptionPane.showMessageDialog(this, resp);
            loadCustomer();
            clear();
        } catch (Exception ex) {
            Logger.getLogger(CustomerView.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(this, ex.getMessage());
        }
    }

    private void deleteCustomer() {
        try {
            String customerId = customerIdText.getText();
            String resp = customerController.deleteCustomer(customerId);
            JOptionPane.showMessageDialog(this, resp);
            loadCustomer();
            clear();
        } catch (Exception ex) {
            Logger.getLogger(CustomerView.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(this, ex.getMessage());
        }
    }

    private void back() {
        dispose();
        new MainPageView().setVisible(true);
    }

    private void searchCustomer() {
        String customerId = customerDetailsTable.getValueAt(customerDetailsTable.getSelectedRow(), 0).toString();
        try {
            CustomerDto customerDto = customerController.getCustomer(customerId);

            if (customerDto != null) {
                customerDto.setCustomerId(customerIdText.getText());
                customerDto.setCustomerTitle(customerTitleText.getText());
                customerDto.setCustomerFirstName(customerFirstNameText.getText());
                customerDto.setCustomerLastName(customerLastNameText.getText());
                customerDto.setCustomerNic(customerNicText.getText());
                customerDto.setCustomerAddress(customerAddressText.getText());
                customerDto.setCustomerContact(customerContactNumberText.getText());

            } else {
                JOptionPane.showMessageDialog(this, "Customer Not Found");
            }
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage());
        }
    }

    private void clear() {
        customerIdText.setText("");
         customerTitleText.setText("");
         customerFirstNameText.setText("");
         customerLastNameText.setText("");
         customerNicText.setText("");
         customerAddressText.setText("");
         customerContactNumberText.setText("");
    }
}
